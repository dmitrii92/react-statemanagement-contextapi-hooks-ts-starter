{"version":3,"sources":["components/navbar/NavBar.tsx","components/inputform/InputForm.tsx","context.ts","components/view/Item.tsx","components/view/View.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","to","InputForm","props","useForm","register","handleSubmit","errors","onSubmit","value","onAdd","firstName","lastName","age","htmlFor","name","ref","type","Context","React","createContext","Item","employee","Consumer","context","onClick","removeEmployee","id","View","employees","map","App","useState","setEmployees","addHandler","newEmployee","Date","now","prev","filter","basename","Provider","className","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gXAGaA,EAAS,WACpB,OAAO,6BACL,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,kB,QCSKC,G,OAAyC,SAACC,GAAW,IAAD,EACpBC,cAAnCC,EADuD,EACvDA,SAAUC,EAD6C,EAC7CA,aAD6C,EAC/BC,OAMhC,OACE,0BAAMC,SAAUF,GALD,SAACG,GAChBN,EAAMO,MAAMD,EAAME,UAAWF,EAAMG,SAAUH,EAAMI,SAKjD,qCAEA,6BACE,2BAAOC,QAAQ,aAAf,cACA,2BAAOC,KAAK,YAAYC,IAAKX,EAAS,OAGxC,6BACE,2BAAOS,QAAQ,YAAf,aACA,2BAAOC,KAAK,WAAWC,IAAKX,EAAS,OAGvC,6BACE,2BAAOS,QAAQ,OAAf,OACA,2BAAOC,KAAK,MAAMC,IAAKX,EAAS,OAGlC,2BAAOY,KAAK,cCnCHC,EAFCC,IAAMC,cAAuC,MCHhDC,EAA2B,SAACC,GAGvC,OACE,kBAAC,EAAQC,SAAT,MACG,SAAAC,GAAO,OACN,4BACE,4BAAKF,EAASX,WACd,4BAAKW,EAASV,UACd,4BAAKU,EAAST,KACd,4BAAI,4BAAQY,QAAS,yBAAMD,QAAN,IAAMA,OAAN,EAAMA,EAASE,eAAeJ,EAASK,MAAxD,cCJDC,G,OAAoC,SAACzB,GAChD,OACE,6BACE,8CACA,+BACE,+BACE,4BACE,0CACA,yCACA,mCACA,+BAGJ,+BACGA,EAAM0B,UAAUC,KAAI,SAAAR,GACnB,OACE,kBAAC,EAAD,CACEX,UAAWW,EAASX,UACpBC,SAAUU,EAASV,SACnBC,IAAKS,EAAST,IACdc,GAAIL,EAASK,a,OCyBdI,MA7Cf,WAEE,IAFa,EAQqBC,mBANG,CACnC,CAAErB,UAAW,QAASC,SAAU,SAAUC,IAAK,GAAIc,GAAI,GACvD,CAAEhB,UAAW,OAAQC,SAAU,SAAUC,IAAK,GAAIc,GAAI,GACtD,CAAEhB,UAAW,OAAQC,SAAU,WAAYC,IAAK,IAAKc,GAAI,KAL9C,mBAQNE,EARM,KAQKI,EARL,KAUPC,EAAa,SAACvB,EAAmBC,EAAkBC,GACvD,IAAMsB,EAAwB,CAC5BxB,UAAWA,EACXC,SAAUA,EACVC,IAAKA,EACLc,GAAIS,KAAKC,OAEXJ,GAAa,SAAAK,GAAI,OAAKH,GAAL,mBAAqBG,QAOlCZ,EAAmC,CACvCA,eAAgB,SAACC,GACfM,EAAaJ,EAAUU,QAAO,SAAAjB,GAAQ,OAAIA,EAASK,KAAOA,QAI9D,OACE,kBAAC,IAAD,CAAea,SAAS,sDACtB,kBAAC,EAAQC,SAAT,CAAkBhC,MAAOiB,GACvB,yBAAKgB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW,kBAAM,kBAAC,EAAD,CAAMhB,UAAWA,OACxD,kBAAC,IAAD,CAAOc,KAAK,UAAUE,UAAW,kBAAM,kBAAC,EAAD,CAAWnC,MAAOwB,YCpCjDY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef791a06.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const NavBar = () => {\n  return <nav>\n    <ul>\n      <li>\n        <Link to=\"/\">Show list</Link>\n      </li>\n      <li>\n        <Link to=\"/create\">Create new</Link>\n      </li>\n    </ul>\n  </nav>\n}","import React from 'react';\nimport { useForm } from \"react-hook-form\";\n\nimport \"./InputForm.css\";\n\ninterface EmployeeFormProps {\n  onAdd(\n    firstName: string\n    , lastName: string\n    , age: number\n  ): void\n}\n\ntype FormData = {\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n\nexport const InputForm: React.FC<EmployeeFormProps> = (props) => {\n  const { register, handleSubmit, errors } = useForm<FormData>();\n\n  const onSubmit = (value: FormData) => {\n    props.onAdd(value.firstName, value.lastName, value.age);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <h3>Input</h3>\n\n      <div>\n        <label htmlFor=\"firstName\">First Name</label>\n        <input name=\"firstName\" ref={register({})} />\n      </div>\n\n      <div>\n        <label htmlFor=\"lastName\">Last Name</label>\n        <input name=\"lastName\" ref={register({})} />\n      </div>\n\n      <div>\n        <label htmlFor=\"age\">Age</label>\n        <input name=\"age\" ref={register({})} />\n      </div>\n\n      <input type=\"submit\" />\n    </form>\n  );\n}","import React from 'react';\n\nexport interface ContextInterface {\n  removeEmployee(\n    id: number\n  ): void\n};\n\nconst Context = React.createContext<ContextInterface | null>(null);\n\nexport default Context;","import React, { useContext } from \"react\";\n\nimport { Employee } from \"../../interfaces\"\nimport Context from \"../../context\";\n\nexport const Item: React.FC<Employee> = (employee) => {\n  // const {removeEmployee } = useContext(Context);\n\n  return (\n    <Context.Consumer>\n      {context => (\n        <tr>\n          <td>{employee.firstName}</td>\n          <td>{employee.lastName}</td>\n          <td>{employee.age}</td>\n          <td><button onClick={() => context?.removeEmployee(employee.id)}>&times;</button></td>\n        </tr>\n      )}\n    </Context.Consumer>\n  );\n}","import React from \"react\";\n\nimport { Employee } from \"../../interfaces\";\nimport { Item } from \"./Item\";\n\nimport \"./View.css\";\n\ninterface EmployeeViewProps {\n  employees: Employee[]\n}\n\nexport const View: React.FC<EmployeeViewProps> = (props) => {\n  return (\n    <div>\n      <h3>Employees List</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Age</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {props.employees.map(employee => {\n            return (\n              <Item\n                firstName={employee.firstName}\n                lastName={employee.lastName}\n                age={employee.age}\n                id={employee.id}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>);\n}","import React, { useState } from \"react\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\n\nimport { NavBar } from \"./components/navbar/NavBar\";\nimport { InputForm } from \"./components/inputform/InputForm\";\nimport { View } from \"./components/view/View\";\nimport { Employee } from \"./interfaces\";\n\nimport \"./App.css\";\nimport Context, { ContextInterface } from \"./context\";\n\nfunction App() {\n\n  const initialEmployees: Employee[] = [\n    { firstName: \"Vasya\", lastName: \"Ivanov\", age: 18, id: 0 },\n    { firstName: \"Ivan\", lastName: \"Petrov\", age: 25, id: 1 },\n    { firstName: \"Petr\", lastName: \"Vasiliev\", age: 111, id: 2 },\n  ];\n\n  const [employees, setEmployees] = useState<Employee[]>(initialEmployees);\n\n  const addHandler = (firstName: string, lastName: string, age: number) => {\n    const newEmployee: Employee = {\n      firstName: firstName,\n      lastName: lastName,\n      age: age,\n      id: Date.now()\n    }\n    setEmployees(prev => [newEmployee, ...prev]);\n  };\n\n  // const removeEmployee = (id: number) => {\n  //   setEmployees(employees.filter(employee => employee.id !== id))\n  // };\n\n  const removeEmployee: ContextInterface = {\n    removeEmployee: (id: number) => {\n      setEmployees(employees.filter(employee => employee.id !== id));\n    }\n  };\n\n  return (\n    <BrowserRouter basename=\"/react-statemanagement-contextapi-hooks-ts-starter\">\n      <Context.Provider value={removeEmployee} >\n        <div className=\"App\">\n          <NavBar />\n          <Switch>\n            <Route path=\"/\" exact component={() => <View employees={employees} />} />\n            <Route path=\"/create\" component={() => <InputForm onAdd={addHandler} />} />\n          </Switch>\n        </div>\n      </Context.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}